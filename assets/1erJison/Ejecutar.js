/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Ejecutar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,7],$V2=[1,8],$V3=[1,9],$V4=[1,10],$V5=[1,11],$V6=[1,12],$V7=[1,13],$V8=[1,14],$V9=[1,15],$Va=[1,16],$Vb=[1,22],$Vc=[1,17],$Vd=[1,23],$Ve=[5,31,50,51],$Vf=[2,5,9,13,20,21,22,23,27,31,32,33,34,37,40,50,51,57],$Vg=[1,28],$Vh=[1,29],$Vi=[1,42],$Vj=[1,44],$Vk=[1,43],$Vl=[1,33],$Vm=[1,34],$Vn=[1,35],$Vo=[1,36],$Vp=[1,37],$Vq=[1,38],$Vr=[1,39],$Vs=[1,40],$Vt=[1,41],$Vu=[1,48],$Vv=[1,52],$Vw=[1,61],$Vx=[1,64],$Vy=[1,77],$Vz=[1,78],$VA=[1,75],$VB=[1,76],$VC=[1,79],$VD=[1,80],$VE=[1,81],$VF=[1,82],$VG=[1,83],$VH=[1,84],$VI=[1,85],$VJ=[1,86],$VK=[1,87],$VL=[1,88],$VM=[1,89],$VN=[12,16,17,31,52,53,54,68,69,70,71,72,73,74,75,76,77,78,79,87],$VO=[12,54],$VP=[1,118],$VQ=[16,54],$VR=[12,16],$VS=[2,5,9,13,20,21,22,23,27,31,32,33,34,37,40,49,50,51,57],$VT=[1,162],$VU=[1,158],$VV=[1,159],$VW=[1,160],$VX=[1,161],$VY=[12,16,17,31,54,68,69,78,79,87],$VZ=[12,16,17,31,52,53,54,68,69,74,75,76,77,78,79,87],$V_=[12,16,17,31,52,53,54,68,69,70,71,73,74,75,76,77,78,79,87],$V$=[12,16,17,31,54,68,69,74,75,76,77,78,79,87],$V01=[10,12,16,28,54],$V11=[31,54],$V21=[31,50,51];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"DecLet":7,"DecConst":8,"id":9,"igual":10,"Exp":11,"ptycoma":12,"Rfunction":13,"pIzq":14,"Param":15,"pDer":16,"dosP":17,"Ntipo":18,"BloqueIns":19,"Rreturn":20,"Rbreak":21,"Rcontinue":22,"Rif":23,"Condicion":24,"NelseIf":25,"Nelse":26,"Rswitch":27,"llIzq":28,"Ncase":29,"Ndefault":30,"llDer":31,"Rwhile":32,"Rdo":33,"Rfor":34,"AsignaFor":35,"insfor":36,"Rlet":37,"Rof":38,"Rin":39,"Rconsole":40,"punto":41,"Rlog":42,"Aumento":43,"Decremento":44,"SumaIgual":45,"RestaIgual":46,"Lparam":47,"Asigna":48,"Relse":49,"Rcase":50,"Rdefault":51,"mas":52,"menos":53,"coma":54,"Lasig":55,"IA":56,"Rconst":57,"Lconst":58,"CA":59,"Rboolean":60,"Rstring":61,"Rnumber":62,"Rvoid":63,"LExp":64,"LLExp":65,"Par":66,"neg":67,"difer":68,"dbigual":69,"por":70,"div":71,"pot":72,"mod":73,"menor":74,"mayor":75,"mayorq":76,"menorq":77,"or":78,"and":79,"entero":80,"decimal":81,"Rfalse":82,"Rnull":83,"Rtrue":84,"cadena":85,"cadenaSimple":86,"ternario":87,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"id",10:"igual",12:"ptycoma",13:"Rfunction",14:"pIzq",16:"pDer",17:"dosP",20:"Rreturn",21:"Rbreak",22:"Rcontinue",23:"Rif",27:"Rswitch",28:"llIzq",31:"llDer",32:"Rwhile",33:"Rdo",34:"Rfor",37:"Rlet",38:"Rof",39:"Rin",40:"Rconsole",41:"punto",42:"Rlog",49:"Relse",50:"Rcase",51:"Rdefault",52:"mas",53:"menos",54:"coma",57:"Rconst",60:"Rboolean",61:"Rstring",62:"Rnumber",63:"Rvoid",67:"neg",68:"difer",69:"dbigual",70:"por",71:"div",72:"pot",73:"mod",74:"menor",75:"mayor",76:"mayorq",77:"menorq",78:"or",79:"and",80:"entero",81:"decimal",82:"Rfalse",83:"Rnull",84:"Rtrue",85:"cadena",86:"cadenaSimple",87:"ternario"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[6,4],[6,8],[6,7],[6,6],[6,5],[6,2],[6,3],[6,2],[6,2],[6,3],[6,4],[6,4],[6,5],[6,8],[6,3],[6,5],[6,9],[6,8],[6,8],[6,7],[6,2],[6,2],[6,2],[6,2],[6,4],[6,5],[19,3],[19,2],[48,6],[35,6],[35,4],[35,3],[25,5],[25,4],[24,3],[26,2],[29,5],[29,4],[30,3],[30,0],[43,3],[44,3],[45,4],[46,4],[36,1],[36,1],[36,1],[36,1],[36,3],[15,5],[15,3],[7,3],[55,3],[55,1],[56,3],[56,5],[56,3],[56,1],[8,3],[58,3],[58,1],[59,5],[59,3],[18,1],[18,1],[18,1],[18,1],[18,1],[64,3],[64,1],[65,3],[65,1],[66,5],[66,3],[47,3],[47,1],[11,2],[11,2],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,5],[11,3],[11,4],[11,3],[11,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		var lista=[];
		lista.push($$[$0-1]);

		var ini={
				nombre:"ini",
				tipo:"noterminal",
				nodo:"nodo"+idg,
				hijos:lista
		}
		idg++;
		this.$=ini;
		return this.$;
	
break;
case 2:
 
		var lista=[];
		lista.push($$[$0-1]);
		lista.push($$[$0]);
	
		var instrucciones={
			nombre:"instrucciones",
			tipo:"noterminal",
			nodo:"nodo"+idg,
			return:"",
			hijos:lista
		}
		idg++;
		this.$=instrucciones;
	
	
break;
case 3:

		var lista=[];
		lista.push($$[$0]);
		var instrucciones={
			nombre:"instrucciones",
			tipo:"noterminal",
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=instrucciones;
	
break;
case 4:
 
		console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
		listaErrores.push({tipo:'Error Sintáctico ',valor:yytext,linea:this._$.first_line,columna:this._$.first_column});
		return {nombre:"error",lista:listaErrores};
		 
break;
case 5: case 6:

			var lista=[];
				lista.push($$[$0]);
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;	
			
break;
case 7:

				var lista=[];
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push($$[$0-1]);
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;				
			
break;
case 8:

				var lista=[];
				lista.push({nombre:"Rfunction",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-7]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-6]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push($$[$0-4]);
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push($$[$0-1]);
				lista.push($$[$0]);

				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;

			
break;
case 9:

				var lista=[];
				lista.push({nombre:"Rfunction",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-6]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push($$[$0-1]);
				lista.push($$[$0]);

				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;

			
break;
case 10:

				var lista=[];
				lista.push({nombre:"Rfunction",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push($$[$0-2]);
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push($$[$0]);
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;

			
break;
case 11:

				var lista=[];
				lista.push({nombre:"Rfunction",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push($$[$0]);
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;

			
break;
case 12:

				var lista=[];
				lista.push({nombre:"Rreturn",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;
			
break;
case 13:

				var lista=[];
				lista.push({nombre:"Rreturn",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push($$[$0-1]);
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;
			
break;
case 14:

				var lista=[];
				lista.push({nombre:"Rbreak",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;
			
break;
case 15:

				var lista=[];
				lista.push({nombre:"Rcontinue",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;
			
break;
case 16:

				var lista=[];
				lista.push({nombre:"Rif",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push($$[$0-1]);
				lista.push($$[$0]);
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;
			
break;
case 17:

				var lista=[];
				lista.push({nombre:"Rif",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push($$[$0-2]);
				lista.push($$[$0-1]);
				lista.push($$[$0]);
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;
			
break;
case 18:

				var lista=[];
				lista.push({nombre:"Rif",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push($$[$0-2]);
				lista.push($$[$0-1]);
				lista.push($$[$0]);
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;

			
break;
case 19:

				var lista=[];
				lista.push({nombre:"Rif",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push($$[$0-3]);
				lista.push($$[$0-2]);
				lista.push($$[$0-1]);
				lista.push($$[$0]);
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;

			
break;
case 20:

				var lista=[];
				lista.push({nombre:"Rswitch",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-7]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-6]});
				idg++;
				lista.push($$[$0-5]);
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"llIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push($$[$0-2]);
				lista.push($$[$0-1]);
				lista.push({nombre:"llDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;

			
break;
case 21:

				var lista=[];
				lista.push({nombre:"Rwhile",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push($$[$0-1]);
				lista.push($$[$0]);
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;
			
break;
case 22:

				var lista=[];
				lista.push({nombre:"Rdo",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push($$[$0-3]);
				lista.push({nombre:"Rwhile",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push($$[$0-1]);
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;				

			
break;
case 23:

				var lista=[];
				lista.push({nombre:"Rfor",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-8]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-7]});
				idg++;
				lista.push($$[$0-6]);
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push($$[$0-4]);
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push($$[$0-2]);
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push($$[$0]);
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;				
			
break;
case 24:

				var lista=[];
				lista.push({nombre:"Rfor",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-7]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-6]});
				idg++;
				lista.push({nombre:"Rlet",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"Rfor",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push($$[$0]);
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;					

			
break;
case 25:

				var lista=[];
				lista.push({nombre:"Rfor",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-7]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-6]});
				idg++;
				lista.push({nombre:"Rlet",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"Rin",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push($$[$0]);
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;				

			
break;
case 26:

				var lista=[];
				lista.push({nombre:"Rconsole",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-6]});
				idg++;
				lista.push({nombre:"punto",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push({nombre:"Rlog",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push($$[$0-2]);
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;
			
break;
case 27: case 29: case 30:

				var lista=[];
				lista.push($$[$0-1]);
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;				
			
break;
case 28:

				var lista=[];
				lista.push($$[$0-1]);
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;
			
break;
case 31:

				var lista=[];
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;	
			
break;
case 32:

				var lista=[];

				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push($$[$0-2]);
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;

				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;					
			
break;
case 33:

				var lista=[];
				lista.push({nombre:"llIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push($$[$0-1]);
				lista.push({nombre:"llDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var BloqueIns={
					nombre:"BloqueIns",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=BloqueIns;

			
break;
case 34:

				var lista=[];
				lista.push({nombre:"llIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push({nombre:"llDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var BloqueIns={
					nombre:"BloqueIns",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=BloqueIns;				
			
break;
case 35:

		var lista=[];
		lista.push({nombre:"Rlet",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
		idg++;
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
		idg++;
		lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push($$[$0-2]);
		lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);

		var Asigna={
			nombre:"Asigna",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Asigna;
	 	
break;
case 36:

		var lista=[];
		lista.push({nombre:"Rlet",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
		idg++;
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
		idg++;
		lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push($$[$0-2]);
		lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);

		var AsignaFor={
			nombre:"AsignaFor",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=AsignaFor;
	
break;
case 37:

		var lista=[];
		lista.push({nombre:"Rlet",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);

		var AsignaFor={
			nombre:"AsignaFor",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=AsignaFor;
		
	
break;
case 38:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);

		var AsignaFor={
			nombre:"AsignaFor",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=AsignaFor;		
	
break;
case 39:

		var lista=[];
		lista.push($$[$0-4]);
		//lista.push($$[$0-3]);
		lista.push({nombre:"Relse",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push({nombre:"Rif",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push($$[$0-1]);
		lista.push($$[$0]);

		var NelseIf={
			nombre:"NelseIf",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			res:"",
			hijos:lista
		}
		idg++;
		this.$=NelseIf;			
	
break;
case 40:

		var lista=[];
		lista.push({nombre:"Relse",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push({nombre:"Rif",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push($$[$0-1]);
		lista.push($$[$0]);

		var NelseIf={
			nombre:"NelseIf",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=NelseIf;			
	
break;
case 41:

		var lista=[];
		lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push($$[$0-1]);
		lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;
		var Condicion={
			nombre:"Condicion",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			res:"",
			hijos:lista
		}
		idg++;
		this.$=Condicion;
	
break;
case 42:

		var lista=[];
		lista.push({nombre:"Relse",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);
		var Nelse={
			nombre:"Nelse",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Nelse;		
	
break;
case 43:

			var lista=[];
			lista.push($$[$0-4]);
			lista.push({nombre:"Rcase",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
			idg++;
			lista.push($$[$0-2]);
			lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
			idg++;
			lista.push($$[$0]);
			var Ncase={
				nombre:"Ncase",
				tipo:"noterminal",
				nodo:"nodo"+idg,	
				hijos:lista
			}
			idg++;
			this.$=Ncase;				
		
break;
case 44:

			var lista=[];
			lista.push({nombre:"Rcase",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
			idg++;
			lista.push($$[$0-2]);
			lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
			idg++;
			lista.push($$[$0]);
			var Ncase={
				nombre:"Ncase",
				tipo:"noterminal",	
				nodo:"nodo"+idg,
				hijos:lista
			}
			idg++;
			this.$=Ncase;
		
break;
case 45:

			var lista=[];
			lista.push({nombre:"Rdefault",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
			idg++;
			lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
			idg++;
			lista.push($$[$0]);
			var Ndefault={
				nombre:"Ndefault",
				tipo:"noterminal",
				nodo:"nodo"+idg,	
				hijos:lista
			}
			idg++;
			this.$=Ndefault;
		
break;
case 46:

		var lista=[];
		lista.push({nombre:"Epsilon",tipo:"terminal",nodo:"nodo"+idg,valor:"epsilon"});
		idg++;
		var Ndefault={
			nombre:"Ndefault",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Ndefault;
	
break;
case 47:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"mas",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push({nombre:"mas",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;
		var Aumento={
			nombre:"Aumento",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Aumento;		
	
break;
case 48:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"menos",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push({nombre:"menos",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;
		var Decremento={
			nombre:"Decremento",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Decremento;			
	
break;
case 49:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push({nombre:"mas",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);
		
		var SumaIgual={
			nombre:"SumaIgual",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=SumaIgual;			
	
break;
case 50:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push({nombre:"menos",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);
		var RestaIgual={
			nombre:"RestaIgual",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=RestaIgual;		
	
break;
case 51:

		var lista=[];
		lista.push($$[$0]);
		var insfor={
			nombre:"insfor",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=insfor;					
	
break;
case 52:

		var lista=[];
		lista.push($$[$0]);
		var insfor={
			nombre:"insfor",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=insfor;		
	
break;
case 53: case 54:

		var lista=[];
		lista.push($$[$0]);
		var insfor={
			nombre:"insfor",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=insfor;			
	
break;
case 55:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);
		var insfor={
			nombre:"insfor",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=insfor;	
	
break;
case 56:

		var lista=[];
		lista.push($$[$0-4]);
		lista.push({nombre:"coma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);
		var parametros=[];
		var Param={
			nombre:"Param",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			parametros:parametros,
			hijos:lista
		}
		idg++;
		this.$=Param;
	
break;
case 57:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);
		var parametros=[];
		var Param={
			nombre:"Param",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			parametros:parametros,
			hijos:lista
		}
		idg++;
		this.$=Param;		
	
break;
case 58:

		var lista=[];
		lista.push({nombre:"Rlet",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push($$[$0-1]);
		lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;
		
		var DecLet={
			nombre:"DecLet",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=DecLet;

	
break;
case 59:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"coma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);	
		var Lasig={
			nombre:"Lasig",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Lasig;
	
break;
case 60:

		var lista=[];
		lista.push($$[$0]);
		var Lasig={
			nombre:"Lasig",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Lasig;
	
break;
case 61:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);	
		var IA={
			nombre:"IA",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=IA;

	
break;
case 62:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
		idg++;
		lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push($$[$0-2]);
		lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);

		var IA={
			nombre:"IA",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=IA;
	
break;
case 63:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);

		var IA={
			nombre:"IA",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=IA;
	
break;
case 64:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;
		var IA={
			nombre:"IA",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=IA;
	
break;
case 65:

		var lista=[];
		lista.push({nombre:"Rconst",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push($$[$0-1]);
		lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;
		var DecConst={
			nombre:"DecConst",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=DecConst;
	
break;
case 66:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"coma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);
		var Lconst={
			nombre:"Lconst",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Lconst;
	
break;
case 67:

		var lista=[];
		lista.push($$[$0]);
		var Lconst={
			nombre:"Lconst",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Lconst;	
	
break;
case 68:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
		idg++;
		lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push($$[$0-2]);
		lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		lista.push($$[$0-1]);
		var CA={
			nombre:"CA",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=CA;	
	
break;
case 69:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);
		var CA={
			nombre:"CA",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=CA;			
	
break;
case 70:

		var lista=[];
		lista.push({nombre:"Rboolean",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Ntipo={
			nombre:"Ntipo",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			valor:"",
			hijos:lista
		}
		idg++;
		this.$=Ntipo;		
	
break;
case 71:

		var lista=[];
		lista.push({nombre:"Rstring",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Ntipo={
			nombre:"Ntipo",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Ntipo;
	
break;
case 72:

		var lista=[];
		lista.push({nombre:"Rnumber",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Ntipo={
			nombre:"Ntipo",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Ntipo;		
	
break;
case 73:

		var lista=[];
		lista.push({nombre:"Rvoid",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Ntipo={
			nombre:"Ntipo",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Ntipo;		
	
break;
case 74:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});		
		idg++;
		var Ntipo={
			nombre:"Ntipo",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Ntipo;		
	
break;
case 75:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"coma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var LExp={
			nombre:"LExp",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=LExp;		
	
break;
case 76:

		var lista=[];
		lista.push($$[$0]);		
		var LExp={
			nombre:"LExp",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=LExp;		
	
break;
case 77:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"coma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var LLExp={
			nombre:"LLExp",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=LLExp;		
	
break;
case 78:

		var lista=[];
		lista.push($$[$0]);		
		var LLExp={
			nombre:"LLExp",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=LLExp;		
	
break;
case 79:

		var lista=[];
		lista.push($$[$0-4]);
		lista.push({nombre:"coma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);
				
		var Par={
			nombre:"Par",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Par;			
	
break;
case 80:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);
				
		var Par={
			nombre:"Par",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Par;				
	
break;
case 81:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"coma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);
		var valores=[];
		var Lparam={
			nombre:"Lparam",
			tipo:"noterminal",
			nodo:"nodo"+idg,
			valores:valores,	
			hijos:lista
		}
		idg++;
		this.$=Lparam;		
	
break;
case 82:

		var lista=[];
		lista.push($$[$0]);
		var valores=[];				
		var Lparam={
			nombre:"Lparam",
			tipo:"noterminal",
			nodo:"nodo"+idg,
			valores:valores,	
			hijos:lista
		}
		idg++;
		this.$=Lparam;		
	
break;
case 83:

		var lista=[];
		lista.push({nombre:"menos",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Exp;		 
	 
break;
case 84:

		var lista=[];
		lista.push({nombre:"neg",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Exp;		 	 		
	
break;
case 85:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"difer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 86:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"dbigual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 87:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"mas",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 88:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"menos",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 89:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"por",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 90:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"div",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 91:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"pot",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 92:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"mod",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 93:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"menor",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 94:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"mayor",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 95:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"mayorq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 96:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"menorq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 97:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"or",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 98:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"and",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 99:

		var lista=[];
		lista.push({nombre:"difer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 100:

		var lista=[];
		lista.push({nombre:"decimal",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 101:

		var lista=[];
		lista.push({nombre:"Rfalse",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 102:

		var lista=[];
		lista.push({nombre:"Rnull",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 103:

		var lista=[];
		lista.push({nombre:"Rtrue",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 104:

		var lista=[];
		if($$[$0].includes("\\n")){
			$$[$0]=$$[$0].replace("\\n","\n");
		}
		if($$[$0].includes("\\r")){
			$$[$0]=$$[$0].replace("\\r","\r");
		}
		if($$[$0].includes("\\t")){
			$$[$0]=$$[$0].replace("\\t","\t");
		}
		lista.push({nombre:"cadena",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Exp;	
	
break;
case 105:

		var lista=[];
		if($$[$0].includes('\\n')){
			$$[$0]=$$[$0].replace('\\n','\n');
		}
		if($$[$0].includes('\\r')){
			$$[$0]=$$[$0].replace('\\r','\r');
		}
		if($$[$0].includes('\\t')){
			$$[$0]=$$[$0].replace('\\t','\t');
		}
		lista.push({nombre:"cadenaSimple",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 106:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});		
		idg++;
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;			
	
break;
case 107:

		var lista=[];
		lista.push($$[$0-4]);
		lista.push({nombre:"ternario",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push($$[$0-2]);
		lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;				
	
break;
case 108:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 109:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push($$[$0-1]);
		lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 110:

		var lista=[];
		lista.push({nombre:"llIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push($$[$0-1]);
		lista.push({nombre:"llDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 111:

		var lista=[];
		lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push($$[$0-1]);
		lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,8:6,9:$V1,13:$V2,20:$V3,21:$V4,22:$V5,23:$V6,27:$V7,32:$V8,33:$V9,34:$Va,37:$Vb,40:$Vc,43:18,44:19,45:20,46:21,57:$Vd},{1:[3]},{5:[1,24]},o($Ve,[2,3],{6:3,7:5,8:6,43:18,44:19,45:20,46:21,4:25,2:$V0,9:$V1,13:$V2,20:$V3,21:$V4,22:$V5,23:$V6,27:$V7,32:$V8,33:$V9,34:$Va,37:$Vb,40:$Vc,57:$Vd}),o($Ve,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),{10:[1,26],14:[1,27],52:$Vg,53:$Vh},{9:[1,30]},{9:$Vi,11:32,12:[1,31],14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{12:[1,45]},{12:[1,46]},{14:$Vu,24:47},{14:[1,49]},{14:$Vu,24:50},{19:51,28:$Vv},{14:[1,53]},{41:[1,54]},{12:[1,55]},{12:[1,56]},{12:[1,57]},{12:[1,58]},{9:$Vw,55:59,56:60},{9:$Vx,58:62,59:63},{1:[2,1]},o($Ve,[2,2]),{9:$Vi,11:65,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{9:$Vi,11:68,14:$Vj,16:[1,66],28:$Vk,47:67,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{10:[1,70],52:[1,69]},{10:[1,72],53:[1,71]},{14:[1,73]},o($Vf,[2,12]),{12:[1,74],52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,87:$VM},{9:$Vi,11:90,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{9:$Vi,11:91,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},o($VN,[2,99]),o($VN,[2,100]),o($VN,[2,101]),o($VN,[2,102]),o($VN,[2,103]),o($VN,[2,104]),o($VN,[2,105]),o($VN,[2,106],{14:[1,92]}),{9:[1,94],66:93},{9:$Vi,11:95,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},o($Vf,[2,14]),o($Vf,[2,15]),{19:96,28:$Vv},{9:$Vi,11:97,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{9:$Vi,11:98,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{19:99,28:$Vv},{32:[1,100]},{2:$V0,4:101,6:3,7:5,8:6,9:$V1,13:$V2,20:$V3,21:$V4,22:$V5,23:$V6,27:$V7,31:[1,102],32:$V8,33:$V9,34:$Va,37:$Vb,40:$Vc,43:18,44:19,45:20,46:21,57:$Vd},{9:[1,105],35:103,37:[1,104]},{42:[1,106]},o($Vf,[2,27]),o($Vf,[2,28]),o($Vf,[2,29]),o($Vf,[2,30]),{12:[1,107],54:[1,108]},o($VO,[2,60]),o($VO,[2,64],{10:[1,110],17:[1,109]}),{12:[1,111],54:[1,112]},o($VO,[2,67]),{10:[1,114],17:[1,113]},{12:[1,115],52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,87:$VM},{12:[1,116]},{16:[1,117],54:$VP},o($VQ,[2,82],{52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,87:$VM}),o($VR,[2,47]),{9:$Vi,11:119,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},o($VR,[2,48]),{9:$Vi,11:120,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{9:[1,123],15:121,16:[1,122]},o($Vf,[2,13]),{9:$Vi,11:124,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{9:$Vi,11:125,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{9:$Vi,11:126,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{9:$Vi,11:127,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{9:$Vi,11:128,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{9:$Vi,11:129,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{9:$Vi,11:130,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{9:$Vi,11:131,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{9:$Vi,11:132,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{9:$Vi,11:133,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{9:$Vi,11:134,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{9:$Vi,11:135,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{9:$Vi,11:136,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{9:$Vi,11:137,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{9:$Vi,11:138,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},o($VN,[2,83]),o($VN,[2,84]),{9:$Vi,11:68,14:$Vj,16:[1,139],28:$Vk,47:140,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{31:[1,141],54:[1,142]},{17:[1,143]},{16:[1,144],52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,87:$VM},o($Vf,[2,16],{25:145,26:146,49:[1,147]}),{16:[1,148],52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,87:$VM},{16:[1,149],52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,87:$VM},o($Vf,[2,21]),{14:$Vu,24:150},{31:[1,151]},o($VS,[2,34]),{12:[1,152]},{9:[1,153]},{10:[1,154]},{14:[1,155]},o($Vf,[2,58]),{9:$Vw,56:156},{9:$VT,18:157,60:$VU,61:$VV,62:$VW,63:$VX},{9:$Vi,11:163,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},o($Vf,[2,65]),{9:$Vx,59:164},{9:$VT,18:165,60:$VU,61:$VV,62:$VW,63:$VX},{9:$Vi,11:166,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},o($Vf,[2,7]),o($Vf,[2,31]),{12:[1,167]},{9:$Vi,11:168,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},o($VR,[2,49],{52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,87:$VM}),o($VR,[2,50],{52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,87:$VM}),{16:[1,169],54:[1,170]},{17:[1,171],19:172,28:$Vv},{17:[1,173]},o($VY,[2,85],{52:$Vy,53:$Vz,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ}),o($VY,[2,86],{52:$Vy,53:$Vz,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ}),o($VZ,[2,87],{70:$VC,71:$VD,72:$VE,73:$VF}),o($VZ,[2,88],{70:$VC,71:$VD,72:$VE,73:$VF}),o($V_,[2,89],{72:$VE}),o($V_,[2,90],{72:$VE}),o($VN,[2,91]),o($V_,[2,92],{72:$VE}),o($V$,[2,93],{52:$Vy,53:$Vz,70:$VC,71:$VD,72:$VE,73:$VF}),o($V$,[2,94],{52:$Vy,53:$Vz,70:$VC,71:$VD,72:$VE,73:$VF}),o($V$,[2,95],{52:$Vy,53:$Vz,70:$VC,71:$VD,72:$VE,73:$VF}),o($V$,[2,96],{52:$Vy,53:$Vz,70:$VC,71:$VD,72:$VE,73:$VF}),o([12,16,17,31,54,78],[2,97],{52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,79:$VL,87:$VM}),o([12,16,17,31,54,78,79],[2,98],{52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,87:$VM}),{17:[1,174],52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,87:$VM},o($VN,[2,108]),{16:[1,175],54:$VP},o($VN,[2,110]),{9:[1,176]},{9:$Vi,11:177,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},o($VN,[2,111]),o($Vf,[2,17],{26:178,49:[1,179]}),o($Vf,[2,18]),{19:181,23:[1,180],28:$Vv},o([12,28],[2,41]),{28:[1,182]},{12:[1,183]},o($VS,[2,33]),{9:$Vi,11:184,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{10:[1,188],17:[1,187],38:[1,185],39:[1,186]},{9:$Vi,11:189,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{9:$Vi,11:190,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},o($VO,[2,59]),o($VO,[2,61],{10:[1,191]}),o($V01,[2,70]),o($V01,[2,71]),o($V01,[2,72]),o($V01,[2,73]),o($V01,[2,74]),o($VO,[2,63],{52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,87:$VM}),o($VO,[2,66]),{10:[1,192]},o($VO,[2,69],{52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,87:$VM}),o($Vf,[2,32]),o($VQ,[2,81],{52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,87:$VM}),{17:[1,193],19:194,28:$Vv},{9:[1,195]},{9:$VT,18:196,60:$VU,61:$VV,62:$VW,63:$VX},o($Vf,[2,11]),{9:$VT,18:197,60:$VU,61:$VV,62:$VW,63:$VX},{9:$Vi,11:198,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},o($VN,[2,109]),{17:[1,199]},o($V11,[2,80],{52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,87:$VM}),o($Vf,[2,19]),{19:181,23:[1,200],28:$Vv},{14:$Vu,24:201},o($Vf,[2,42]),{29:202,50:[1,203]},o($Vf,[2,22]),{12:[1,204],52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,87:$VM},{9:[1,205]},{9:[1,206]},{9:$VT,18:207,60:$VU,61:$VV,62:$VW,63:$VX},{9:$Vi,11:208,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{12:[2,38],52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,87:$VM},{16:[1,209],52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,87:$VM},{9:$Vi,11:210,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{9:$Vi,11:211,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{9:$VT,18:212,60:$VU,61:$VV,62:$VW,63:$VX},o($Vf,[2,10]),{17:[1,213]},{19:214,28:$Vv},o($VQ,[2,57]),o([12,16,17,31,54,78,79,87],[2,107],{52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ}),{9:$Vi,11:215,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{14:$Vu,24:216},{19:217,28:$Vv},{30:218,31:[2,46],50:[1,219],51:[1,220]},{9:$Vi,11:221,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{9:[1,227],36:222,43:223,44:224,45:225,46:226},{16:[1,228]},{16:[1,229]},{10:[1,230]},{12:[2,37],52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,87:$VM},{12:[1,231]},o($VO,[2,62],{52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,87:$VM}),o($VO,[2,68],{52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,87:$VM}),{19:232,28:$Vv},{9:$VT,18:233,60:$VU,61:$VV,62:$VW,63:$VX},o($Vf,[2,9]),o($V11,[2,79],{52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,87:$VM}),{19:234,28:$Vv},o($VS,[2,40]),{31:[1,235]},{9:$Vi,11:236,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},{17:[1,237]},{17:[1,238],52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,87:$VM},{16:[1,239]},{16:[2,51]},{16:[2,52]},{16:[2,53]},{16:[2,54]},{10:[1,240],52:$Vg,53:$Vh},{19:241,28:$Vv},{19:242,28:$Vv},{9:$Vi,11:243,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},o($Vf,[2,26]),o($Vf,[2,8]),o($VQ,[2,56]),o($VS,[2,39]),o($Vf,[2,20]),{17:[1,244],52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,87:$VM},{2:$V0,4:245,6:3,7:5,8:6,9:$V1,13:$V2,20:$V3,21:$V4,22:$V5,23:$V6,27:$V7,32:$V8,33:$V9,34:$Va,37:$Vb,40:$Vc,43:18,44:19,45:20,46:21,57:$Vd},{2:$V0,4:246,6:3,7:5,8:6,9:$V1,13:$V2,20:$V3,21:$V4,22:$V5,23:$V6,27:$V7,32:$V8,33:$V9,34:$Va,37:$Vb,40:$Vc,43:18,44:19,45:20,46:21,57:$Vd},{19:247,28:$Vv},{9:$Vi,11:248,14:$Vj,28:$Vk,53:$Vl,67:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt},o($Vf,[2,24]),o($Vf,[2,25]),{12:[2,36],52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,87:$VM},{2:$V0,4:249,6:3,7:5,8:6,9:$V1,13:$V2,20:$V3,21:$V4,22:$V5,23:$V6,27:$V7,32:$V8,33:$V9,34:$Va,37:$Vb,40:$Vc,43:18,44:19,45:20,46:21,57:$Vd},{31:[2,45]},o($V21,[2,44]),o($Vf,[2,23]),{16:[2,55],52:$Vy,53:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL,87:$VM},o($V21,[2,43])],
defaultActions: {24:[2,1],223:[2,51],224:[2,52],225:[2,53],226:[2,54],245:[2,45]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


var listaErrores=[];
var idg=0;

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:
break;
case 2:
break;
case 3:// comentario simple línea
break;
case 4:// comentario multiple líneas
break;
case 5:return 12;
break;
case 6:return 17;
break;
case 7:return 69;
break;
case 8:return 72;
break;
case 9:return 10;
break;
case 10:return 41;
break;
case 11:return 54;
break;
case 12:return 14;
break;
case 13:return 16;
break;
case 14:return 'cIzq';
break;
case 15:return 'cDer';
break;
case 16:return 28;
break;
case 17:return 31;
break;
case 18:return 52;
break;
case 19:return 53;
break;
case 20:return 70;
break;
case 21:return 71;
break;
case 22:return 73;
break;
case 23:return 77;
break;
case 24:return 76;
break;
case 25:return 74;
break;
case 26:return 75;
break;
case 27:return 'agudo';
break;
case 28:return 87;
break;
case 29:return 'dolar';
break;
case 30:return 68;
break;
case 31:return 67;
break;
case 32:return 78;
break;
case 33:return 79;
break;
case 34:return 83;
break;
case 35:return 21;
break;
case 36:return 20;
break;
case 37:return 23;
break;
case 38:return 49;
break;
case 39:return 34;
break;
case 40:return 38;
break;
case 41:return 39;
break;
case 42:return 32;
break;
case 43:return 33;
break;
case 44:return 22;
break;
case 45:return 13;
break;
case 46:return 61;
break;
case 47:return 60;
break;
case 48:return 62;
break;
case 49:return 'Rtype';
break;
case 50:return 63;
break;
case 51:return 84;
break;
case 52:return 82;
break;
case 53:return 51;
break;
case 54:return 27;
break;
case 55:return 50;
break;
case 56:return 'Rarray';
break;
case 57:return 37;
break;
case 58:return 57;
break;
case 59:return 40;
break;
case 60:return 42;
break;
case 61:return 'Rpush';
break;
case 62:return 'Rpop';
break;
case 63:return 'Rlength';
break;
case 64:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2);return 'cadenar'
break;
case 65:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2);return 85
break;
case 66:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2);return 86
break;
case 67:return 81;
break;
case 68:return 80;
break;
case 69:return 9;
break;
case 70:return 5;
break;
case 71: 
	console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
	listaErrores.push({tipo:'Error Léxico',valor:yy_.yytext,linea:yy_.yylloc.first_line,columna:yy_.yylloc.first_column});
	return {nombre:"error",lista:listaErrores};
	
break;
}
},
rules: [/^(?:\s+)/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:;)/,/^(?::)/,/^(?:==)/,/^(?:\*\*)/,/^(?:=)/,/^(?:\.)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:`)/,/^(?:\?)/,/^(?:\$)/,/^(?:!=)/,/^(?:!)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:null\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:continue\b)/,/^(?:function\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:number\b)/,/^(?:type\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:default\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:Array\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:{cadenar})/,/^(?:("([^\"]|[ntr])*"))/,/^(?:('([^\']|[ntr])*'))/,/^(?:([0-9]+(\.[0-9]+)?\b))/,/^(?:([0-9]+\b))/,/^(?:([a-zA-Z]+(_|[a-zA-AZ]|[0-9])*\b))/,/^(?:$)/,/^(?:.)/],
conditions: {"string":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Ejecutar;
exports.Parser = Ejecutar.Parser;
exports.parse = function () { return Ejecutar.parse.apply(Ejecutar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}