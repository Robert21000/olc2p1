/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var miGramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,7],$V3=[1,6],$V4=[1,9],$V5=[1,10],$V6=[1,11],$V7=[1,12],$V8=[1,13],$V9=[1,14],$Va=[1,15],$Vb=[1,16],$Vc=[1,17],$Vd=[1,18],$Ve=[1,19],$Vf=[5,7,8,15,22,25,26,29,30,31,32,36,39,40,41,46,56,57],$Vg=[1,31],$Vh=[1,32],$Vi=[1,49],$Vj=[1,52],$Vk=[1,50],$Vl=[1,46],$Vm=[1,39],$Vn=[1,40],$Vo=[1,41],$Vp=[1,42],$Vq=[1,43],$Vr=[1,44],$Vs=[1,45],$Vt=[1,47],$Vu=[1,48],$Vv=[1,56],$Vw=[1,60],$Vx=[1,75],$Vy=[1,86],$Vz=[1,92],$VA=[1,93],$VB=[1,90],$VC=[1,91],$VD=[1,94],$VE=[1,95],$VF=[1,96],$VG=[1,97],$VH=[1,98],$VI=[1,99],$VJ=[1,100],$VK=[1,101],$VL=[1,102],$VM=[1,103],$VN=[1,104],$VO=[9,14,20,25,59,60,61,62,70,71,72,73,74,75,76,77,78,79,80,81,89],$VP=[1,131],$VQ=[1,127],$VR=[1,128],$VS=[1,129],$VT=[1,130],$VU=[9,12,14,17,20,25,59,60,61,62,70,71,72,73,74,75,76,77,78,79,80,81,89],$VV=[1,141],$VW=[20,62],$VX=[14,20],$VY=[59,62],$VZ=[5,7,8,15,22,25,26,29,30,31,32,36,39,40,41,46,55,56,57],$V_=[1,189],$V$=[12,14,20,23,58,62],$V01=[9,14,20,25,59,62,70,71,80,81,89],$V11=[9,14,20,25,59,60,61,62,70,71,76,77,78,79,80,81,89],$V21=[9,14,20,25,59,60,61,62,70,71,72,73,75,76,77,78,79,80,81,89],$V31=[9,14,20,25,59,62,70,71,76,77,78,79,80,81,89],$V41=[1,230],$V51=[25,62],$V61=[12,14,58],$V71=[1,298],$V81=[1,299],$V91=[8,25],$Va1=[25,56,57];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"Rlet":7,"id":8,"dosP":9,"Ntipo":10,"Arr":11,"igual":12,"Exp":13,"ptycoma":14,"Rconst":15,"Objeto":16,"punto":17,"Rpop":18,"pIzq":19,"pDer":20,"Rpush":21,"Rtype":22,"llIzq":23,"Decl":24,"llDer":25,"Rfunction":26,"Param":27,"BloqueIns":28,"Rreturn":29,"Rbreak":30,"Rcontinue":31,"Rif":32,"Condicion":33,"NelseIf":34,"Nelse":35,"Rswitch":36,"Ncase":37,"Ndefault":38,"Rwhile":39,"Rdo":40,"Rfor":41,"AsignaFor":42,"insfor":43,"Rof":44,"Rin":45,"Rconsole":46,"Rlog":47,"Aumento":48,"Decremento":49,"SumaIgual":50,"Lparam":51,"Rlength":52,"RestaIgual":53,"Asigna":54,"Relse":55,"Rcase":56,"Rdefault":57,"cIzq":58,"cDer":59,"mas":60,"menos":61,"coma":62,"Separador":63,"Rboolean":64,"Rstring":65,"Rnumber":66,"Rvoid":67,"LExp":68,"neg":69,"difer":70,"dbigual":71,"por":72,"div":73,"pot":74,"mod":75,"menor":76,"mayor":77,"mayorq":78,"menorq":79,"or":80,"and":81,"entero":82,"decimal":83,"Rfalse":84,"Rnull":85,"Rtrue":86,"cadena":87,"cadenaSimple":88,"ternario":89,"Par":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"Rlet",8:"id",9:"dosP",12:"igual",14:"ptycoma",15:"Rconst",17:"punto",18:"Rpop",19:"pIzq",20:"pDer",21:"Rpush",22:"Rtype",23:"llIzq",25:"llDer",26:"Rfunction",29:"Rreturn",30:"Rbreak",31:"Rcontinue",32:"Rif",36:"Rswitch",39:"Rwhile",40:"Rdo",41:"Rfor",44:"Rof",45:"Rin",46:"Rconsole",47:"Rlog",52:"Rlength",55:"Relse",56:"Rcase",57:"Rdefault",58:"cIzq",59:"cDer",60:"mas",61:"menos",62:"coma",64:"Rboolean",65:"Rstring",66:"Rnumber",67:"Rvoid",69:"neg",70:"difer",71:"dbigual",72:"por",73:"div",74:"pot",75:"mod",76:"menor",77:"mayor",78:"mayorq",79:"menorq",80:"or",81:"and",82:"entero",83:"decimal",84:"Rfalse",85:"Rnull",86:"Rtrue",87:"cadena",88:"cadenaSimple",89:"ternario"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,8],[6,6],[6,7],[6,5],[6,3],[6,5],[6,8],[6,7],[6,5],[6,4],[6,4],[6,6],[6,6],[6,7],[6,7],[6,6],[6,8],[6,7],[6,6],[6,5],[6,2],[6,3],[6,2],[6,2],[6,3],[6,4],[6,4],[6,5],[6,8],[6,3],[6,5],[6,9],[6,8],[6,8],[6,7],[6,2],[6,2],[6,2],[6,4],[6,5],[6,6],[6,7],[6,2],[16,3],[16,3],[28,3],[28,2],[54,6],[42,6],[42,4],[42,3],[34,5],[34,4],[33,3],[35,2],[37,5],[37,4],[38,3],[38,0],[11,3],[11,2],[48,3],[49,3],[50,4],[53,4],[43,1],[43,1],[43,1],[43,1],[43,3],[27,5],[27,3],[24,5],[24,4],[63,1],[63,1],[10,1],[10,1],[10,1],[10,1],[10,1],[68,3],[68,1],[13,2],[13,2],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,1],[13,1],[13,1],[13,1],[13,1],[13,3],[13,1],[13,1],[13,5],[13,3],[13,4],[13,3],[13,1],[13,3],[13,5],[13,6],[13,3],[13,1],[90,5],[90,3],[51,3],[51,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		var lista=[];
		lista.push($$[$0-1]);

		var ini={
				nombre:"ini",
				tipo:"noterminal",
				nodo:"nodo"+idg,
				hijos:lista
		}
		idg++;
		this.$=ini;
		return this.$;
	
break;
case 2:
 
		var lista=[];
		lista.push($$[$0-1]);
		lista.push($$[$0]);
	
		var instrucciones={
			nombre:"instrucciones",
			tipo:"noterminal",
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=instrucciones;
	
	
break;
case 3:

		var lista=[];
		lista.push($$[$0]);
		var instrucciones={
			nombre:"instrucciones",
			tipo:"noterminal",
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=instrucciones;
	
break;
case 4:
 
		//console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
		listaErrores.push({tipo:'Error Sintáctico ',valor:yytext,linea:this._$.first_line,columna:this._$.first_column});
		return listaErrores;
		 
break;
case 5:

				var lista=[];
				lista.push({nombre:"Rlet",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-7]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-6]});
				idg++;
				lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push($$[$0-4]);
				lista.push($$[$0-3]);
				lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push($$[$0-1]);

				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;
			
break;
case 6:

				var lista=[];
				lista.push({nombre:"Rlet",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push($$[$0-2]);
				lista.push($$[$0-1]);
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;

			
break;
case 7:

				var lista=[];
				lista.push({nombre:"Rlet",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-6]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push($$[$0-3]);
				lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;				
				lista.push($$[$0-1]);
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;

			
break;
case 8:


				var lista=[];
				lista.push({nombre:"Rlet",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push($$[$0-1]);
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;
				
			
break;
case 9:

				var lista=[];
				lista.push({nombre:"Rlet",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;
			
break;
case 10:

				var lista=[];
				lista.push({nombre:"Rlet",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push($$[$0-1]);
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;

			
break;
case 11:

				var lista=[];
				lista.push({nombre:"Rconst",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-7]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-6]});
				idg++;
				lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push($$[$0-4]);
				lista.push($$[$0-3]);
				lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push($$[$0-1]);
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;

			
break;
case 12:

				var lista=[];
				lista.push({nombre:"Rconst",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-6]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push($$[$0-3]);
				lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push($$[$0-1]);
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;

				
			
break;
case 13:

				var lista=[];
				lista.push({nombre:"Rconst",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push($$[$0-1]);
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;

			
break;
case 14:

				var lista=[];
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push($$[$0-1]);
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;				
			
break;
case 15:

				var lista=[];
				lista.push($$[$0-3]);
				lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push($$[$0-1]);
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;
			
break;
case 16:

				var lista=[];
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push({nombre:"punto",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"Rpop",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;				
			
break;
case 17:

				var lista=[];
				lista.push($$[$0-5]);
				lista.push({nombre:"punto",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"Rpop",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;

				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;
			
break;
case 18:

				var lista=[];
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-6]});
				idg++;
				lista.push({nombre:"punto",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push({nombre:"Rpush",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push($$[$0-2]);
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;					
			
break;
case 19:

				var lista=[];
				lista.push($$[$0-6]);
				lista.push({nombre:"punto",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push({nombre:"Rpush",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push($$[$0-2]);
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;

				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;
			
break;
case 20:

				var lista=[];
				lista.push({nombre:"Rtype",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push({nombre:"llIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push($$[$0-1]);
				lista.push({nombre:"llDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;

				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;

			
break;
case 21:

				var lista=[];
				lista.push({nombre:"Rfunction",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-7]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-6]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push($$[$0-4]);
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push($$[$0-1]);
				lista.push($$[$0]);

				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;

			
break;
case 22:

				var lista=[];
				lista.push({nombre:"Rfunction",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-6]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push($$[$0-1]);
				lista.push($$[$0]);

				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;

			
break;
case 23:

				var lista=[];
				lista.push({nombre:"Rfunction",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push($$[$0-2]);
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push($$[$0]);
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;

			
break;
case 24:

				var lista=[];
				lista.push({nombre:"Rfunction",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push($$[$0]);
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;

			
break;
case 25:

				var lista=[];
				lista.push({nombre:"Rreturn",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;
			
break;
case 26:

				var lista=[];
				lista.push({nombre:"Rreturn",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push($$[$0-1]);
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;
			
break;
case 27:

				var lista=[];
				lista.push({nombre:"Rbreak",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;
			
break;
case 28:

				var lista=[];
				lista.push({nombre:"Rcontinue",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;
			
break;
case 29:

				var lista=[];
				lista.push({nombre:"Rif",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push($$[$0-1]);
				lista.push($$[$0]);
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;
			
break;
case 30:

				var lista=[];
				lista.push({nombre:"Rif",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push($$[$0-2]);
				lista.push($$[$0-1]);
				lista.push($$[$0]);
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;
			
break;
case 31:

				var lista=[];
				lista.push({nombre:"Rif",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push($$[$0-2]);
				lista.push($$[$0-1]);
				lista.push($$[$0]);
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;

			
break;
case 32:

				var lista=[];
				lista.push({nombre:"Rif",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push($$[$0-3]);
				lista.push($$[$0-2]);
				lista.push($$[$0-1]);
				lista.push($$[$0]);
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;

			
break;
case 33:

				var lista=[];
				lista.push({nombre:"Rswitch",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-7]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-6]});
				idg++;
				lista.push($$[$0-5]);
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"llIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push($$[$0-2]);
				lista.push($$[$0-1]);
				lista.push({nombre:"llDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;

			
break;
case 34:

				var lista=[];
				lista.push({nombre:"Rwhile",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push($$[$0-1]);
				lista.push($$[$0]);
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;
			
break;
case 35:

				var lista=[];
				lista.push({nombre:"Rdo",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push($$[$0-3]);
				lista.push({nombre:"Rwhile",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push($$[$0-1]);
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;				

			
break;
case 36:

				var lista=[];
				lista.push({nombre:"Rfor",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-8]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-7]});
				idg++;
				lista.push($$[$0-6]);
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push($$[$0-4]);
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push($$[$0-2]);
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push($$[$0]);
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;				
			
break;
case 37:

				var lista=[];
				lista.push({nombre:"Rfor",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-7]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-6]});
				idg++;
				lista.push({nombre:"Rlet",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"Rfor",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push($$[$0]);
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;					

			
break;
case 38:

				var lista=[];
				lista.push({nombre:"Rfor",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-7]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-6]});
				idg++;
				lista.push({nombre:"Rlet",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"Rin",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push($$[$0]);
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;				

			
break;
case 39:

				var lista=[];
				lista.push({nombre:"Rconsole",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-6]});
				idg++;
				lista.push({nombre:"punto",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push({nombre:"Rlog",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push($$[$0-2]);
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;
			
break;
case 40: case 42: case 47:

				var lista=[];
				lista.push($$[$0-1]);
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;				
			
break;
case 41:

				var lista=[];
				lista.push($$[$0-1]);
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;
			
break;
case 43:

				var lista=[];
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;	
			
break;
case 44:

				var lista=[];

				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push($$[$0-2]);
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;

				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;					
			
break;
case 45:

				var lista=[];
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
				idg++;
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push({nombre:"punto",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push({nombre:"Rlength",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",
					nodo:"nodo"+idg,	
					hijos:lista
				}
				idg++;
				this.$=instruccion;									
			
break;
case 46:

				var lista=[];
				lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-6]});
				idg++;
				lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
				idg++;
				lista.push($$[$0-4]);
				lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
				idg++;
				lista.push({nombre:"punto",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push({nombre:"Rlength",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var instruccion={
					nombre:"instruccion",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=instruccion;									
			
break;
case 48:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"punto",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;
		var objeto={
			nombre:"Objeto",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=objeto;			
	
break;
case 49:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"punto",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;	
		var objeto={
			nombre:"Objeto",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=objeto;

	
break;
case 50:

				var lista=[];
				lista.push({nombre:"llIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
				idg++;
				lista.push($$[$0-1]);
				lista.push({nombre:"llDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var BloqueIns={
					nombre:"BloqueIns",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=BloqueIns;

			
break;
case 51:

				var lista=[];
				lista.push({nombre:"llIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
				idg++;
				lista.push({nombre:"llDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
				idg++;
				var BloqueIns={
					nombre:"BloqueIns",
					tipo:"noterminal",	
					nodo:"nodo"+idg,
					hijos:lista
				}
				idg++;
				this.$=BloqueIns;				
			
break;
case 52:

		var lista=[];
		lista.push({nombre:"Rlet",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
		idg++;
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
		idg++;
		lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push($$[$0-2]);
		lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);

		var Asigna={
			nombre:"Asigna",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Asigna;
	 
break;
case 53:

		var lista=[];
		lista.push({nombre:"Rlet",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
		idg++;
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
		idg++;
		lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push($$[$0-2]);
		lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);

		var AsignaFor={
			nombre:"AsignaFor",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=AsignaFor;
	
break;
case 54:

		var lista=[];
		lista.push({nombre:"Rlet",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);

		var AsignaFor={
			nombre:"AsignaFor",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=AsignaFor;
		
	
break;
case 55:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);

		var AsignaFor={
			nombre:"AsignaFor",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=AsignaFor;		
	
break;
case 56:

		var lista=[];
		lista.push($$[$0-4]);
		lista.push($$[$0-3]);
		lista.push({nombre:"Rif",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push($$[$0-1]);
		lista.push($$[$0]);

		var NelseIf={
			nombre:"NelseIf",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=NelseIf;			
	
break;
case 57:

		var lista=[];
		lista.push({nombre:"Relse",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push({nombre:"Rif",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push($$[$0-1]);
		lista.push($$[$0]);

		var NelseIf={
			nombre:"NelseIf",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=NelseIf;			
	
break;
case 58:

		var lista=[];
		lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push($$[$0-1]);
		lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;
		var Condicion={
			nombre:"Condicion",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Condicion;
	
break;
case 59:

		var lista=[];
		lista.push({nombre:"Relse",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);
		var Nelse={
			nombre:"Nelse",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Nelse;		
	
break;
case 60:

			var lista=[];
			lista.push($$[$0-4]);
			lista.push({nombre:"Rcase",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
			idg++;
			lista.push($$[$0-2]);
			lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
			idg++;
			lista.push($$[$0]);
			var Ncase={
				nombre:"Ncase",
				tipo:"noterminal",
				nodo:"nodo"+idg,	
				hijos:lista
			}
			idg++;
			this.$=Ncase;				
		
break;
case 61:

			var lista=[];
			lista.push({nombre:"Rcase",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
			idg++;
			lista.push($$[$0-2]);
			lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
			idg++;
			lista.push($$[$0]);
			var Ncase={
				nombre:"Ncase",
				tipo:"noterminal",	
				nodo:"nodo"+idg,
				hijos:lista
			}
			idg++;
			this.$=Ncase;
		
break;
case 62:

			var lista=[];
			lista.push({nombre:"Rdefault",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
			idg++;
			lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
			idg++;
			lista.push($$[$0]);
			var Ndefault={
				nombre:"Ndefault",
				tipo:"noterminal",
				nodo:"nodo"+idg,	
				hijos:lista
			}
			idg++;
			this.$=Ndefault;
		
break;
case 63:

		var lista=[];
		lista.push({nombre:"Epsilon",tipo:"terminal",nodo:"nodo"+idg,valor:"epsilon"});
		idg++;
		var Ndefault={
			nombre:"Ndefault",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Ndefault;
	
break;
case 64:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"cIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push({nombre:"cDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;
		var Arr={
			nombre:"Arr",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Arr;
	
break;
case 65:

		var lista=[];
		lista.push({nombre:"cIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push({nombre:"cDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;
		var Arr={
			nombre:"Arr",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Arr;		
	
break;
case 66:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"mas",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push({nombre:"mas",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;
		var Aumento={
			nombre:"Aumento",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Aumento;		
	
break;
case 67:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"menos",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push({nombre:"menos",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;
		var Decremento={
			nombre:"Decremento",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Decremento;			
	
break;
case 68:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push({nombre:"mas",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);
		
		var SumaIgual={
			nombre:"SumaIgual",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=SumaIgual;			
	
break;
case 69:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push({nombre:"menos",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);
		var RestaIgual={
			nombre:"RestaIgual",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=RestaIgual;		
	
break;
case 70:

		var lista=[];
		lista.push($$[$0]);
		var insfor={
			nombre:"insfor",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=insfor;					
	
break;
case 71:

		var lista=[];
		lista.push($$[$0]);
		var insfor={
			nombre:"insfor",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=insfor;		
	
break;
case 72: case 73:

		var lista=[];
		lista.push($$[$0]);
		var insfor={
			nombre:"insfor",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=insfor;			
	
break;
case 74:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"igual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);
		var insfor={
			nombre:"insfor",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=insfor;	
	
break;
case 75:

		var lista=[];
		lista.push($$[$0-4]);
		lista.push({nombre:"coma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);

		var Param={
			nombre:"Param",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Param;
	
break;
case 76:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);

		var Param={
			nombre:"Param",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Param;		
	
break;
case 77:

		var lista=[];
		lista.push($$[$0-4]);
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push($$[$0-1]);
		lista.push($$[$0]);

		var Decl={
			nombre:"Decl",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Decl;

	
break;
case 78:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push($$[$0-1]);
		lista.push($$[$0]);

		var Decl={
			nombre:"Decl",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Decl;		
	
break;
case 79:

		var lista=[];
		lista.push({nombre:"ptycoma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;
		var Separador={
			nombre:"Separador",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Separador;			
	
break;
case 80:

		var lista=[];
		lista.push({nombre:"coma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Separador={
			nombre:"Separador",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Separador;		
	
break;
case 81:

		var lista=[];
		lista.push({nombre:"Rboolean",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Ntipo={
			nombre:"Ntipo",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Ntipo;		
	
break;
case 82:

		var lista=[];
		lista.push({nombre:"Rstring",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Ntipo={
			nombre:"Ntipo",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Ntipo;
	
break;
case 83:

		var lista=[];
		lista.push({nombre:"Rnumber",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Ntipo={
			nombre:"Ntipo",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Ntipo;		
	
break;
case 84:

		var lista=[];
		lista.push({nombre:"Rvoid",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Ntipo={
			nombre:"Ntipo",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Ntipo;		
	
break;
case 85:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});		
		idg++;
		var Ntipo={
			nombre:"Ntipo",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Ntipo;		
	
break;
case 86:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"coma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var LExp={
			nombre:"LExp",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=LExp;		
	
break;
case 87:

		var lista=[];
		lista.push($$[$0]);		
		var LExp={
			nombre:"LExp",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=LExp;		
	
break;
case 88:

		var lista=[];
		lista.push({nombre:"menos",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Exp;		 
	 
break;
case 89:

		var lista=[];
		lista.push({nombre:"neg",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Exp;		 	 		
	
break;
case 90:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"difer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 91:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"dbigual",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 92:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"mas",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 93:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"menos",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 94:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"por",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 95:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"div",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 96:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"pot",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 97:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"mod",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 98:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"menor",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 99:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"mayor",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 100:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"mayorq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 101:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"menorq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 102:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"or",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 103:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"and",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 104:

		var lista=[];
		lista.push({nombre:"difer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 105:

		var lista=[];
		lista.push({nombre:"decimal",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 106:

		var lista=[];
		lista.push({nombre:"Rfalse",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 107:

		var lista=[];
		lista.push({nombre:"Rnull",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 108:

		var lista=[];
		lista.push({nombre:"Rtrue",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 109:

		var lista=[];
		lista.push({nombre:"cIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push($$[$0-1]);
		lista.push({nombre:"cDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 110:

		var lista=[];
		let valor2=$$[$0].replace("\"","");
		lista.push({nombre:"cadena",tipo:"terminal",nodo:"nodo"+idg,valor:valor2});
		idg++;		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Exp;	
	
break;
case 111:

		var lista=[];
		let valor1=$$[$0].replace('\'','');
		lista.push({nombre:"cadenaSimple",tipo:"terminal",nodo:"nodo"+idg,valor:valor1});
		idg++;		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 112:

		var lista=[];
		lista.push($$[$0-4]);
		lista.push({nombre:"ternario",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push($$[$0-2]);
		lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;				
	
break;
case 113:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 114:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push($$[$0-1]);
		lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 115:

		var lista=[];
		lista.push({nombre:"llIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push($$[$0-1]);
		lista.push({nombre:"llDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 116:

		var lista=[];
		lista.push($$[$0]);		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 117:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"punto",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push({nombre:"Rlength",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 118:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
		idg++;
		lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"punto",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push({nombre:"Rlength",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",	
			nodo:"nodo"+idg,
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 119:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-5]});
		idg++;
		lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-4]});
		idg++;
		lista.push($$[$0-3]);
		lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"punto",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push({nombre:"Rlength",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;

		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 120:

		var lista=[];
		lista.push({nombre:"pIzq",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push($$[$0-1]);
		lista.push({nombre:"pDer",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});
		idg++;		
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;		
	
break;
case 121:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0]});		
		idg++;
		var Exp={
			nombre:"Exp",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Exp;			
	
break;
case 122:

		var lista=[];
		lista.push($$[$0-4]);
		lista.push({nombre:"coma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-3]});
		idg++;
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);
				
		var Par={
			nombre:"Par",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Par;			
	
break;
case 123:

		var lista=[];
		lista.push({nombre:"id",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-2]});
		idg++;
		lista.push({nombre:"dosP",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);
				
		var Par={
			nombre:"Par",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Par;				
	
break;
case 124:

		var lista=[];
		lista.push($$[$0-2]);
		lista.push({nombre:"coma",tipo:"terminal",nodo:"nodo"+idg,valor:$$[$0-1]});
		idg++;
		lista.push($$[$0]);
				
		var Lparam={
			nombre:"Lparam",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Lparam;		
	
break;
case 125:

		var lista=[];
		lista.push($$[$0]);				
		var Lparam={
			nombre:"Lparam",
			tipo:"noterminal",
			nodo:"nodo"+idg,	
			hijos:lista
		}
		idg++;
		this.$=Lparam;		
	
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,8:$V2,15:$V3,16:8,22:$V4,26:$V5,29:$V6,30:$V7,31:$V8,32:$V9,36:$Va,39:$Vb,40:$Vc,41:$Vd,46:$Ve,48:20,49:21,50:22,53:23},{1:[3]},{5:[1,24],6:25,7:$V1,8:$V2,15:$V3,16:8,22:$V4,26:$V5,29:$V6,30:$V7,31:$V8,32:$V9,36:$Va,39:$Vb,40:$Vc,41:$Vd,46:$Ve,48:20,49:21,50:22,53:23},o($Vf,[2,3]),o($Vf,[2,4]),{8:[1,26]},{8:[1,27]},{12:[1,28],17:[1,29],19:[1,30],60:$Vg,61:$Vh},{12:[1,33],17:[1,34]},{8:[1,35]},{8:[1,36]},{8:$Vi,13:38,14:[1,37],16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{14:[1,53]},{14:[1,54]},{19:$Vv,33:55},{19:[1,57]},{19:$Vv,33:58},{23:$Vw,28:59},{19:[1,61]},{17:[1,62]},{14:[1,63]},{14:[1,64]},{14:[1,65]},{14:[1,66]},{1:[2,1]},o($Vf,[2,2]),{9:[1,67],12:[1,68],14:[1,69]},{9:[1,70],12:[1,71]},{8:$Vi,13:72,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{8:$Vx,18:[1,73],21:[1,74]},{8:$Vi,13:78,16:51,19:$Vj,20:[1,76],23:$Vk,51:77,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:[1,80],60:[1,79]},{12:[1,82],61:[1,81]},{8:$Vi,13:83,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{8:$Vy,18:[1,84],21:[1,85]},{12:[1,87]},{19:[1,88]},o($Vf,[2,25]),{14:[1,89],60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN},{8:$Vi,13:105,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{8:$Vi,13:106,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($VO,[2,104]),o($VO,[2,105]),o($VO,[2,106]),o($VO,[2,107]),o($VO,[2,108]),{8:$Vi,13:108,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,68:107,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($VO,[2,110]),o($VO,[2,111]),o($VO,[2,121],{17:[1,110],19:[1,109]}),{8:[1,112],90:111},o($VO,[2,116],{17:[1,113]}),{8:$Vi,13:114,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($Vf,[2,27]),o($Vf,[2,28]),{23:$Vw,28:115},{8:$Vi,13:116,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{8:$Vi,13:117,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{23:$Vw,28:118},{39:[1,119]},{2:$V0,4:120,6:3,7:$V1,8:$V2,15:$V3,16:8,22:$V4,25:[1,121],26:$V5,29:$V6,30:$V7,31:$V8,32:$V9,36:$Va,39:$Vb,40:$Vc,41:$Vd,46:$Ve,48:20,49:21,50:22,53:23},{7:[1,123],8:[1,124],42:122},{47:[1,125]},o($Vf,[2,40]),o($Vf,[2,41]),o($Vf,[2,42]),o($Vf,[2,47]),{8:$VP,10:126,64:$VQ,65:$VR,66:$VS,67:$VT},{8:$Vi,13:132,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($Vf,[2,9]),{8:$VP,10:133,64:$VQ,65:$VR,66:$VS,67:$VT},{8:$Vi,13:134,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{14:[1,135],60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN},{19:[1,136]},{19:[1,137]},o($VU,[2,49]),{14:[1,138],17:[1,139]},{20:[1,140],62:$VV},o($VW,[2,125],{60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN}),o($VX,[2,66]),{8:$Vi,13:142,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($VX,[2,67]),{8:$Vi,13:143,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{14:[1,144],60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN},{19:[1,145]},{19:[1,146]},o($VU,[2,48]),{23:[1,147]},{8:[1,150],20:[1,149],27:148},o($Vf,[2,26]),{8:$Vi,13:151,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{8:$Vi,13:152,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{8:$Vi,13:153,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{8:$Vi,13:154,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{8:$Vi,13:155,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{8:$Vi,13:156,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{8:$Vi,13:157,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{8:$Vi,13:158,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{8:$Vi,13:159,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{8:$Vi,13:160,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{8:$Vi,13:161,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{8:$Vi,13:162,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{8:$Vi,13:163,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{8:$Vi,13:164,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{8:$Vi,13:165,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($VO,[2,88]),o($VO,[2,89]),{59:[1,166],62:[1,167]},o($VY,[2,87],{60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN}),{8:$Vi,13:78,16:51,19:$Vj,20:[1,168],23:$Vk,51:169,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{8:$Vx},{25:[1,170],62:[1,171]},{9:[1,172]},{8:$Vy,52:[1,173]},{20:[1,174],60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN},o($Vf,[2,29],{34:175,35:176,55:[1,177]}),{20:[1,178],60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN},{20:[1,179],60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN},o($Vf,[2,34]),{19:$Vv,33:180},{6:25,7:$V1,8:$V2,15:$V3,16:8,22:$V4,25:[1,181],26:$V5,29:$V6,30:$V7,31:$V8,32:$V9,36:$Va,39:$Vb,40:$Vc,41:$Vd,46:$Ve,48:20,49:21,50:22,53:23},o($VZ,[2,51]),{14:[1,182]},{8:[1,183]},{12:[1,184]},{19:[1,185]},{11:186,12:[1,187],14:[1,188],58:$V_},o($V$,[2,81]),o($V$,[2,82]),o($V$,[2,83]),o($V$,[2,84]),o($V$,[2,85]),{14:[1,190],60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN},{11:191,12:[1,192],58:$V_},{14:[1,193],60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN},o($Vf,[2,14]),{20:[1,194]},{8:$Vi,13:195,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($Vf,[2,43]),{52:[1,196]},{14:[1,197],17:[1,198]},{8:$Vi,13:199,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($VX,[2,68],{60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN}),o($VX,[2,69],{60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN}),o($Vf,[2,15]),{20:[1,200]},{8:$Vi,13:201,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{8:[1,203],24:202},{20:[1,204],62:[1,205]},{9:[1,206],23:$Vw,28:207},{9:[1,208]},o($V01,[2,90],{60:$Vz,61:$VA,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK}),o($V01,[2,91],{60:$Vz,61:$VA,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK}),o($V11,[2,92],{72:$VD,73:$VE,74:$VF,75:$VG}),o($V11,[2,93],{72:$VD,73:$VE,74:$VF,75:$VG}),o($V21,[2,94],{74:$VF}),o($V21,[2,95],{74:$VF}),o($VO,[2,96]),o($V21,[2,97],{74:$VF}),o($V31,[2,98],{60:$Vz,61:$VA,72:$VD,73:$VE,74:$VF,75:$VG}),o($V31,[2,99],{60:$Vz,61:$VA,72:$VD,73:$VE,74:$VF,75:$VG}),o($V31,[2,100],{60:$Vz,61:$VA,72:$VD,73:$VE,74:$VF,75:$VG}),o($V31,[2,101],{60:$Vz,61:$VA,72:$VD,73:$VE,74:$VF,75:$VG}),o([9,14,20,25,59,62,80],[2,102],{60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,81:$VM,89:$VN}),o([9,14,20,25,59,62,80,81],[2,103],{60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,89:$VN}),{9:[1,209],60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN},o($VO,[2,109]),{8:$Vi,13:210,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($VO,[2,113],{17:[1,211]}),{20:[1,212],62:$VV},o($VO,[2,115]),{8:[1,213]},{8:$Vi,13:214,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($VO,[2,117]),o($VO,[2,120]),o($Vf,[2,30],{35:215,55:[1,216]}),o($Vf,[2,31]),{23:$Vw,28:218,32:[1,217]},o([14,23],[2,58]),{23:[1,219]},{14:[1,220]},o($VZ,[2,50]),{8:$Vi,13:221,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{9:[1,224],12:[1,225],44:[1,222],45:[1,223]},{8:$Vi,13:226,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{8:$Vi,13:227,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{12:[1,228],14:[1,229],58:$V41},{8:$Vi,13:231,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($Vf,[2,10]),{59:[1,232]},o($Vf,[2,8]),{12:[1,233],58:$V41},{8:$Vi,13:234,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($Vf,[2,13]),{14:[1,235]},{20:[1,236],60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN},{14:[1,237]},o($Vf,[2,44]),{52:[1,238]},o($VW,[2,124],{60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN}),{14:[1,239]},{20:[1,240],60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN},{8:[1,242],25:[1,241]},{9:[1,243]},{9:[1,244],23:$Vw,28:245},{8:[1,246]},{8:$VP,10:247,64:$VQ,65:$VR,66:$VS,67:$VT},o($Vf,[2,24]),{8:$VP,10:248,64:$VQ,65:$VR,66:$VS,67:$VT},{8:$Vi,13:249,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($VY,[2,86],{60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN}),{52:[1,250]},o($VO,[2,114],{17:[1,251]}),{9:[1,252]},o($V51,[2,123],{60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN}),o($Vf,[2,32]),{23:$Vw,28:218,32:[1,253]},{19:$Vv,33:254},o($Vf,[2,59]),{37:255,56:[1,256]},o($Vf,[2,35]),{14:[1,257],60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN},{8:[1,258]},{8:[1,259]},{8:$VP,10:260,64:$VQ,65:$VR,66:$VS,67:$VT},{8:$Vi,13:261,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{14:[2,55],60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN},{20:[1,262],60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN},{8:$Vi,13:263,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($Vf,[2,6]),{59:[1,264]},{14:[1,265],60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN},o($V61,[2,65]),{8:$Vi,13:266,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{14:[1,267],60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN},o($Vf,[2,16]),{14:[1,268]},o($Vf,[2,45]),{14:[1,269]},o($Vf,[2,17]),{14:[1,270]},o($Vf,[2,20]),{9:[1,271]},{8:$VP,10:272,64:$VQ,65:$VR,66:$VS,67:$VT},{8:$VP,10:273,64:$VQ,65:$VR,66:$VS,67:$VT},o($Vf,[2,23]),{9:[1,274]},{23:$Vw,28:275},o($VW,[2,76]),o([9,14,20,25,59,62,80,81,89],[2,112],{60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK}),o($VO,[2,118]),{52:[1,276]},{8:$Vi,13:277,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{19:$Vv,33:278},{23:$Vw,28:279},{25:[2,63],38:280,56:[1,281],57:[1,282]},{8:$Vi,13:283,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{8:[1,289],43:284,48:285,49:286,50:287,53:288},{20:[1,290]},{20:[1,291]},{12:[1,292]},{14:[2,54],60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN},{14:[1,293]},{14:[1,294],60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN},o($V61,[2,64]),o($Vf,[2,7]),{14:[1,295],60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN},o($Vf,[2,12]),o($Vf,[2,18]),o($Vf,[2,46]),o($Vf,[2,19]),{8:$VP,10:296,64:$VQ,65:$VR,66:$VS,67:$VT},{14:$V71,62:$V81,63:297},{23:$Vw,28:300},{8:$VP,10:301,64:$VQ,65:$VR,66:$VS,67:$VT},o($Vf,[2,22]),o($VO,[2,119]),o($V51,[2,122],{60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN}),{23:$Vw,28:302},o($VZ,[2,57]),{25:[1,303]},{8:$Vi,13:304,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},{9:[1,305]},{9:[1,306],60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN},{20:[1,307]},{20:[2,70]},{20:[2,71]},{20:[2,72]},{20:[2,73]},{12:[1,308],60:$Vg,61:$Vh},{23:$Vw,28:309},{23:$Vw,28:310},{8:$Vi,13:311,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($Vf,[2,39]),o($Vf,[2,5]),o($Vf,[2,11]),{14:$V71,62:$V81,63:312},o($V91,[2,78]),o($V91,[2,79]),o($V91,[2,80]),o($Vf,[2,21]),o($VW,[2,75]),o($VZ,[2,56]),o($Vf,[2,33]),{9:[1,313],60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN},{2:$V0,4:314,6:3,7:$V1,8:$V2,15:$V3,16:8,22:$V4,26:$V5,29:$V6,30:$V7,31:$V8,32:$V9,36:$Va,39:$Vb,40:$Vc,41:$Vd,46:$Ve,48:20,49:21,50:22,53:23},{2:$V0,4:315,6:3,7:$V1,8:$V2,15:$V3,16:8,22:$V4,26:$V5,29:$V6,30:$V7,31:$V8,32:$V9,36:$Va,39:$Vb,40:$Vc,41:$Vd,46:$Ve,48:20,49:21,50:22,53:23},{23:$Vw,28:316},{8:$Vi,13:317,16:51,19:$Vj,23:$Vk,58:$Vl,61:$Vm,69:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu},o($Vf,[2,37]),o($Vf,[2,38]),{14:[2,53],60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN},o($V91,[2,77]),{2:$V0,4:318,6:3,7:$V1,8:$V2,15:$V3,16:8,22:$V4,26:$V5,29:$V6,30:$V7,31:$V8,32:$V9,36:$Va,39:$Vb,40:$Vc,41:$Vd,46:$Ve,48:20,49:21,50:22,53:23},{6:25,7:$V1,8:$V2,15:$V3,16:8,22:$V4,25:[2,62],26:$V5,29:$V6,30:$V7,31:$V8,32:$V9,36:$Va,39:$Vb,40:$Vc,41:$Vd,46:$Ve,48:20,49:21,50:22,53:23},o($Va1,[2,61],{16:8,48:20,49:21,50:22,53:23,6:25,7:$V1,8:$V2,15:$V3,22:$V4,26:$V5,29:$V6,30:$V7,31:$V8,32:$V9,36:$Va,39:$Vb,40:$Vc,41:$Vd,46:$Ve}),o($Vf,[2,36]),{20:[2,74],60:$Vz,61:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,89:$VN},o($Va1,[2,60],{16:8,48:20,49:21,50:22,53:23,6:25,7:$V1,8:$V2,15:$V3,22:$V4,26:$V5,29:$V6,30:$V7,31:$V8,32:$V9,36:$Va,39:$Vb,40:$Vc,41:$Vd,46:$Ve})],
defaultActions: {24:[2,1],285:[2,70],286:[2,71],287:[2,72],288:[2,73]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


var listaErrores=[];
var idg=0;

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:
break;
case 2:
break;
case 3:// comentario simple línea
break;
case 4:// comentario multiple líneas
break;
case 5:return 14;
break;
case 6:return 9;
break;
case 7:return 71;
break;
case 8:return 74;
break;
case 9:return 12;
break;
case 10:return 17;
break;
case 11:return 62;
break;
case 12:return 19;
break;
case 13:return 20;
break;
case 14:return 58;
break;
case 15:return 59;
break;
case 16:return 23;
break;
case 17:return 25;
break;
case 18:return 60;
break;
case 19:return 61;
break;
case 20:return 72;
break;
case 21:return 73;
break;
case 22:return 75;
break;
case 23:return 79;
break;
case 24:return 78;
break;
case 25:return 76;
break;
case 26:return 77;
break;
case 27:return 'agudo';
break;
case 28:return 89;
break;
case 29:return 'dolar';
break;
case 30:return 70;
break;
case 31:return 69;
break;
case 32:return 80;
break;
case 33:return 81;
break;
case 34:return 85;
break;
case 35:return 30;
break;
case 36:return 29;
break;
case 37:return 32;
break;
case 38:return 55;
break;
case 39:return 41;
break;
case 40:return 44;
break;
case 41:return 45;
break;
case 42:return 39;
break;
case 43:return 40;
break;
case 44:return 31;
break;
case 45:return 26;
break;
case 46:return 65;
break;
case 47:return 64;
break;
case 48:return 66;
break;
case 49:return 22;
break;
case 50:return 67;
break;
case 51:return 86;
break;
case 52:return 84;
break;
case 53:return 57;
break;
case 54:return 36;
break;
case 55:return 56;
break;
case 56:return 'Rarray';
break;
case 57:return 7;
break;
case 58:return 15;
break;
case 59:return 46;
break;
case 60:return 47;
break;
case 61:return 21;
break;
case 62:return 18;
break;
case 63:return 52;
break;
case 64:return 82;
break;
case 65:return 83;
break;
case 66:return 8;
break;
case 67:return 87;
break;
case 68:return 88;
break;
case 69:return 5;
break;
case 70: 
	//console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
	listaErrores.push({tipo:'Error Léxico',valor:yy_.yytext,linea:yy_.yylloc.first_line,columna:yy_.yylloc.first_column});
	return listaErrores;
	
break;
}
},
rules: [/^(?:\s+)/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:;)/,/^(?::)/,/^(?:==)/,/^(?:\*\*)/,/^(?:=)/,/^(?:\.)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:`)/,/^(?:\?)/,/^(?:\$)/,/^(?:!=)/,/^(?:!)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:null\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:continue\b)/,/^(?:function\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:number\b)/,/^(?:type\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:default\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:Array\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:[0-9]+\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[a-zA-Z]+(_|[a-zA-AZ]|[0-9])*\b)/,/^(?:"([^\"]|\\n|\\t|\\r)*")/,/^(?:'[^\']*')/,/^(?:$)/,/^(?:.)/],
conditions: {"string":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = miGramatica;
exports.Parser = miGramatica.Parser;
exports.parse = function () { return miGramatica.parse.apply(miGramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}