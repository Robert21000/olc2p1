/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Ejecutar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,7],$V2=[1,8],$V3=[1,9],$V4=[1,10],$V5=[1,11],$V6=[1,12],$V7=[1,13],$V8=[1,14],$V9=[1,15],$Va=[1,16],$Vb=[1,23],$Vc=[1,17],$Vd=[1,18],$Ve=[1,24],$Vf=[5,31,52,53],$Vg=[2,5,9,13,20,21,22,23,27,31,32,33,34,37,40,43,52,53,59],$Vh=[1,29],$Vi=[1,30],$Vj=[1,44],$Vk=[1,36],$Vl=[1,46],$Vm=[1,34],$Vn=[1,35],$Vo=[1,37],$Vp=[1,38],$Vq=[1,39],$Vr=[1,40],$Vs=[1,41],$Vt=[1,42],$Vu=[1,43],$Vv=[1,45],$Vw=[1,50],$Vx=[1,54],$Vy=[1,64],$Vz=[1,67],$VA=[1,80],$VB=[1,81],$VC=[1,78],$VD=[1,79],$VE=[1,82],$VF=[1,83],$VG=[1,84],$VH=[1,85],$VI=[1,86],$VJ=[1,87],$VK=[1,88],$VL=[1,89],$VM=[1,90],$VN=[1,91],$VO=[1,92],$VP=[12,16,17,31,54,55,56,69,70,71,72,73,74,75,76,77,78,79,80,88],$VQ=[12,56],$VR=[1,124],$VS=[16,56],$VT=[12,16],$VU=[2,5,9,13,20,21,22,23,27,31,32,33,34,37,40,43,51,52,53,59],$VV=[1,170],$VW=[1,166],$VX=[1,167],$VY=[1,168],$VZ=[1,169],$V_=[12,16,17,31,56,69,70,79,80,88],$V$=[12,16,17,31,54,55,56,69,70,75,76,77,78,79,80,88],$V01=[12,16,17,31,54,55,56,69,70,71,72,74,75,76,77,78,79,80,88],$V11=[12,16,17,31,56,69,70,75,76,77,78,79,80,88],$V21=[10,12,16,28,56],$V31=[31,56],$V41=[31,52,53];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"DecLet":7,"DecConst":8,"id":9,"igual":10,"Exp":11,"ptycoma":12,"Rfunction":13,"pIzq":14,"Param":15,"pDer":16,"dosP":17,"Ntipo":18,"BloqueIns":19,"Rreturn":20,"Rbreak":21,"Rcontinue":22,"Rif":23,"Condicion":24,"NelseIf":25,"Nelse":26,"Rswitch":27,"llIzq":28,"Ncase":29,"Ndefault":30,"llDer":31,"Rwhile":32,"Rdo":33,"Rfor":34,"AsignaFor":35,"insfor":36,"Rlet":37,"Rof":38,"Rin":39,"Rconsole":40,"punto":41,"Rlog":42,"miconsole":43,"LLExp":44,"Aumento":45,"Decremento":46,"SumaIgual":47,"RestaIgual":48,"Lparam":49,"Asigna":50,"Relse":51,"Rcase":52,"Rdefault":53,"mas":54,"menos":55,"coma":56,"Lasig":57,"IA":58,"Rconst":59,"Lconst":60,"CA":61,"Rboolean":62,"Rstring":63,"Rnumber":64,"Rvoid":65,"LExp":66,"Par":67,"neg":68,"difer":69,"dbigual":70,"por":71,"div":72,"pot":73,"mod":74,"menor":75,"mayor":76,"mayorq":77,"menorq":78,"or":79,"and":80,"entero":81,"decimal":82,"Rfalse":83,"Rnull":84,"Rtrue":85,"cadena":86,"cadenaSimple":87,"ternario":88,"cIzq":89,"cDer":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"id",10:"igual",12:"ptycoma",13:"Rfunction",14:"pIzq",16:"pDer",17:"dosP",20:"Rreturn",21:"Rbreak",22:"Rcontinue",23:"Rif",27:"Rswitch",28:"llIzq",31:"llDer",32:"Rwhile",33:"Rdo",34:"Rfor",37:"Rlet",38:"Rof",39:"Rin",40:"Rconsole",41:"punto",42:"Rlog",43:"miconsole",51:"Relse",52:"Rcase",53:"Rdefault",54:"mas",55:"menos",56:"coma",59:"Rconst",62:"Rboolean",63:"Rstring",64:"Rnumber",65:"Rvoid",68:"neg",69:"difer",70:"dbigual",71:"por",72:"div",73:"pot",74:"mod",75:"menor",76:"mayor",77:"mayorq",78:"menorq",79:"or",80:"and",81:"entero",82:"decimal",83:"Rfalse",84:"Rnull",85:"Rtrue",86:"cadena",87:"cadenaSimple",88:"ternario",89:"cIzq",90:"cDer"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[6,4],[6,8],[6,7],[6,6],[6,5],[6,2],[6,3],[6,2],[6,2],[6,3],[6,4],[6,4],[6,5],[6,8],[6,3],[6,5],[6,9],[6,8],[6,8],[6,7],[6,5],[6,2],[6,2],[6,2],[6,2],[6,4],[6,5],[19,3],[19,2],[50,6],[35,6],[35,4],[35,3],[25,5],[25,4],[24,3],[26,2],[29,5],[29,4],[30,3],[30,0],[45,3],[46,3],[47,4],[48,4],[36,1],[36,1],[36,1],[36,1],[36,3],[15,5],[15,3],[7,3],[57,3],[57,1],[58,3],[58,5],[58,3],[58,1],[8,3],[60,3],[60,1],[61,5],[61,3],[18,1],[18,1],[18,1],[18,1],[18,1],[66,3],[66,1],[44,3],[44,1],[67,5],[67,3],[49,3],[49,1],[11,2],[11,2],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,5],[11,2],[11,3],[11,4],[11,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 4:
 
		console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
		listaErrores.push({tipo:'Error Sintáctico ',valor:yytext,linea:this._$.first_line,columna:this._$.first_column});
		return {nombre:"error",lista:listaErrores};
		 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,8:6,9:$V1,13:$V2,20:$V3,21:$V4,22:$V5,23:$V6,27:$V7,32:$V8,33:$V9,34:$Va,37:$Vb,40:$Vc,43:$Vd,45:19,46:20,47:21,48:22,59:$Ve},{1:[3]},{5:[1,25]},o($Vf,[2,3],{6:3,7:5,8:6,45:19,46:20,47:21,48:22,4:26,2:$V0,9:$V1,13:$V2,20:$V3,21:$V4,22:$V5,23:$V6,27:$V7,32:$V8,33:$V9,34:$Va,37:$Vb,40:$Vc,43:$Vd,59:$Ve}),o($Vf,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),{10:[1,27],14:[1,28],54:$Vh,55:$Vi},{9:[1,31]},{9:$Vj,11:33,12:[1,32],14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{12:[1,47]},{12:[1,48]},{14:$Vw,24:49},{14:[1,51]},{14:$Vw,24:52},{19:53,28:$Vx},{14:[1,55]},{41:[1,56]},{14:[1,57]},{12:[1,58]},{12:[1,59]},{12:[1,60]},{12:[1,61]},{9:$Vy,57:62,58:63},{9:$Vz,60:65,61:66},{1:[2,1]},o($Vf,[2,2]),{9:$Vj,11:68,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{9:$Vj,11:71,14:$Vk,16:[1,69],28:$Vl,49:70,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{10:[1,73],54:[1,72]},{10:[1,75],55:[1,74]},{14:[1,76]},o($Vg,[2,12]),{12:[1,77],54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO},{9:$Vj,11:93,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{9:$Vj,11:94,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{9:$Vj,11:95,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},o($VP,[2,101]),o($VP,[2,102]),o($VP,[2,103]),o($VP,[2,104]),o($VP,[2,105]),o($VP,[2,106]),o($VP,[2,107]),o($VP,[2,108],{14:[1,96]}),{90:[1,97]},{9:[1,99],67:98},o($Vg,[2,14]),o($Vg,[2,15]),{19:100,28:$Vx},{9:$Vj,11:101,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{9:$Vj,11:102,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{19:103,28:$Vx},{32:[1,104]},{2:$V0,4:105,6:3,7:5,8:6,9:$V1,13:$V2,20:$V3,21:$V4,22:$V5,23:$V6,27:$V7,31:[1,106],32:$V8,33:$V9,34:$Va,37:$Vb,40:$Vc,43:$Vd,45:19,46:20,47:21,48:22,59:$Ve},{9:[1,109],35:107,37:[1,108]},{42:[1,110]},{9:$Vj,11:112,14:$Vk,28:$Vl,44:111,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},o($Vg,[2,28]),o($Vg,[2,29]),o($Vg,[2,30]),o($Vg,[2,31]),{12:[1,113],56:[1,114]},o($VQ,[2,61]),o($VQ,[2,65],{10:[1,116],17:[1,115]}),{12:[1,117],56:[1,118]},o($VQ,[2,68]),{10:[1,120],17:[1,119]},{12:[1,121],54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO},{12:[1,122]},{16:[1,123],56:$VR},o($VS,[2,83],{54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO}),o($VT,[2,48]),{9:$Vj,11:125,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},o($VT,[2,49]),{9:$Vj,11:126,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{9:[1,129],15:127,16:[1,128]},o($Vg,[2,13]),{9:$Vj,11:130,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{9:$Vj,11:131,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{9:$Vj,11:132,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{9:$Vj,11:133,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{9:$Vj,11:134,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{9:$Vj,11:135,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{9:$Vj,11:136,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{9:$Vj,11:137,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{9:$Vj,11:138,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{9:$Vj,11:139,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{9:$Vj,11:140,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{9:$Vj,11:141,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{9:$Vj,11:142,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{9:$Vj,11:143,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{9:$Vj,11:144,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},o($VP,[2,84]),o($VP,[2,85]),{16:[1,145],54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO},{9:$Vj,11:71,14:$Vk,16:[1,146],28:$Vl,49:147,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},o($VP,[2,110]),{31:[1,148],56:[1,149]},{17:[1,150]},o($Vg,[2,16],{25:151,26:152,51:[1,153]}),{16:[1,154],54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO},{16:[1,155],54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO},o($Vg,[2,21]),{14:$Vw,24:156},{31:[1,157]},o($VU,[2,35]),{12:[1,158]},{9:[1,159]},{10:[1,160]},{14:[1,161]},{16:[1,162],56:[1,163]},o($VS,[2,79],{54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO}),o($Vg,[2,59]),{9:$Vy,58:164},{9:$VV,18:165,62:$VW,63:$VX,64:$VY,65:$VZ},{9:$Vj,11:171,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},o($Vg,[2,66]),{9:$Vz,61:172},{9:$VV,18:173,62:$VW,63:$VX,64:$VY,65:$VZ},{9:$Vj,11:174,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},o($Vg,[2,7]),o($Vg,[2,32]),{12:[1,175]},{9:$Vj,11:176,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},o($VT,[2,50],{54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO}),o($VT,[2,51],{54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO}),{16:[1,177],56:[1,178]},{17:[1,179],19:180,28:$Vx},{17:[1,181]},o($V_,[2,86],{54:$VA,55:$VB,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL}),o($V_,[2,87],{54:$VA,55:$VB,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL}),o($V$,[2,88],{71:$VE,72:$VF,73:$VG,74:$VH}),o($V$,[2,89],{71:$VE,72:$VF,73:$VG,74:$VH}),o($V01,[2,90],{73:$VG}),o($V01,[2,91],{73:$VG}),o($VP,[2,92]),o($V01,[2,93],{73:$VG}),o($V11,[2,94],{54:$VA,55:$VB,71:$VE,72:$VF,73:$VG,74:$VH}),o($V11,[2,95],{54:$VA,55:$VB,71:$VE,72:$VF,73:$VG,74:$VH}),o($V11,[2,96],{54:$VA,55:$VB,71:$VE,72:$VF,73:$VG,74:$VH}),o($V11,[2,97],{54:$VA,55:$VB,71:$VE,72:$VF,73:$VG,74:$VH}),o([12,16,17,31,56,79],[2,98],{54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,80:$VN,88:$VO}),o([12,16,17,31,56,79,80],[2,99],{54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,88:$VO}),{17:[1,182],54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO},o($VP,[2,100]),o($VP,[2,111]),{16:[1,183],56:$VR},o($VP,[2,113]),{9:[1,184]},{9:$Vj,11:185,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},o($Vg,[2,17],{26:186,51:[1,187]}),o($Vg,[2,18]),{19:189,23:[1,188],28:$Vx},o([12,28],[2,42]),{28:[1,190]},{12:[1,191]},o($VU,[2,34]),{9:$Vj,11:192,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{10:[1,196],17:[1,195],38:[1,193],39:[1,194]},{9:$Vj,11:197,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{9:$Vj,11:198,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{12:[1,199]},{9:$Vj,11:200,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},o($VQ,[2,60]),o($VQ,[2,62],{10:[1,201]}),o($V21,[2,71]),o($V21,[2,72]),o($V21,[2,73]),o($V21,[2,74]),o($V21,[2,75]),o($VQ,[2,64],{54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO}),o($VQ,[2,67]),{10:[1,202]},o($VQ,[2,70],{54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO}),o($Vg,[2,33]),o($VS,[2,82],{54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO}),{17:[1,203],19:204,28:$Vx},{9:[1,205]},{9:$VV,18:206,62:$VW,63:$VX,64:$VY,65:$VZ},o($Vg,[2,11]),{9:$VV,18:207,62:$VW,63:$VX,64:$VY,65:$VZ},{9:$Vj,11:208,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},o($VP,[2,112]),{17:[1,209]},o($V31,[2,81],{54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO}),o($Vg,[2,19]),{19:189,23:[1,210],28:$Vx},{14:$Vw,24:211},o($Vg,[2,43]),{29:212,52:[1,213]},o($Vg,[2,22]),{12:[1,214],54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO},{9:[1,215]},{9:[1,216]},{9:$VV,18:217,62:$VW,63:$VX,64:$VY,65:$VZ},{9:$Vj,11:218,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{12:[2,39],54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO},{16:[1,219],54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO},o($Vg,[2,27]),o($VS,[2,78],{54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO}),{9:$Vj,11:220,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{9:$Vj,11:221,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{9:$VV,18:222,62:$VW,63:$VX,64:$VY,65:$VZ},o($Vg,[2,10]),{17:[1,223]},{19:224,28:$Vx},o($VS,[2,58]),o([12,16,17,31,56,79,80,88],[2,109],{54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL}),{9:$Vj,11:225,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{14:$Vw,24:226},{19:227,28:$Vx},{30:228,31:[2,47],52:[1,229],53:[1,230]},{9:$Vj,11:231,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{9:[1,237],36:232,45:233,46:234,47:235,48:236},{16:[1,238]},{16:[1,239]},{10:[1,240]},{12:[2,38],54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO},{12:[1,241]},o($VQ,[2,63],{54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO}),o($VQ,[2,69],{54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO}),{19:242,28:$Vx},{9:$VV,18:243,62:$VW,63:$VX,64:$VY,65:$VZ},o($Vg,[2,9]),o($V31,[2,80],{54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO}),{19:244,28:$Vx},o($VU,[2,41]),{31:[1,245]},{9:$Vj,11:246,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},{17:[1,247]},{17:[1,248],54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO},{16:[1,249]},{16:[2,52]},{16:[2,53]},{16:[2,54]},{16:[2,55]},{10:[1,250],54:$Vh,55:$Vi},{19:251,28:$Vx},{19:252,28:$Vx},{9:$Vj,11:253,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},o($Vg,[2,26]),o($Vg,[2,8]),o($VS,[2,57]),o($VU,[2,40]),o($Vg,[2,20]),{17:[1,254],54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO},{2:$V0,4:255,6:3,7:5,8:6,9:$V1,13:$V2,20:$V3,21:$V4,22:$V5,23:$V6,27:$V7,32:$V8,33:$V9,34:$Va,37:$Vb,40:$Vc,43:$Vd,45:19,46:20,47:21,48:22,59:$Ve},{2:$V0,4:256,6:3,7:5,8:6,9:$V1,13:$V2,20:$V3,21:$V4,22:$V5,23:$V6,27:$V7,32:$V8,33:$V9,34:$Va,37:$Vb,40:$Vc,43:$Vd,45:19,46:20,47:21,48:22,59:$Ve},{19:257,28:$Vx},{9:$Vj,11:258,14:$Vk,28:$Vl,55:$Vm,68:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,89:$Vv},o($Vg,[2,24]),o($Vg,[2,25]),{12:[2,37],54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO},{2:$V0,4:259,6:3,7:5,8:6,9:$V1,13:$V2,20:$V3,21:$V4,22:$V5,23:$V6,27:$V7,32:$V8,33:$V9,34:$Va,37:$Vb,40:$Vc,43:$Vd,45:19,46:20,47:21,48:22,59:$Ve},{31:[2,46]},o($V41,[2,45]),o($Vg,[2,23]),{16:[2,56],54:$VA,55:$VB,69:$VC,70:$VD,71:$VE,72:$VF,73:$VG,74:$VH,75:$VI,76:$VJ,77:$VK,78:$VL,79:$VM,80:$VN,88:$VO},o($V41,[2,44])],
defaultActions: {25:[2,1],233:[2,52],234:[2,53],235:[2,54],236:[2,55],255:[2,46]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


var listaErrores=[];
var idg=0;

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:
break;
case 2:
break;
case 3:// comentario simple línea
break;
case 4:// comentario multiple líneas
break;
case 5:return 12;
break;
case 6:return 17;
break;
case 7:return 70;
break;
case 8:return 73;
break;
case 9:return 10;
break;
case 10:return 41;
break;
case 11:return 56;
break;
case 12:return 14;
break;
case 13:return 16;
break;
case 14:return 89;
break;
case 15:return 90;
break;
case 16:return 28;
break;
case 17:return 31;
break;
case 18:return 54;
break;
case 19:return 55;
break;
case 20:return 71;
break;
case 21:return 72;
break;
case 22:return 74;
break;
case 23:return 78;
break;
case 24:return 77;
break;
case 25:return 75;
break;
case 26:return 76;
break;
case 27:return 'agudo';
break;
case 28:return 88;
break;
case 29:return 'dolar';
break;
case 30:return 69;
break;
case 31:return 68;
break;
case 32:return 79;
break;
case 33:return 80;
break;
case 34:return 43;
break;
case 35:return 84;
break;
case 36:return 21;
break;
case 37:return 20;
break;
case 38:return 23;
break;
case 39:return 51;
break;
case 40:return 34;
break;
case 41:return 38;
break;
case 42:return 39;
break;
case 43:return 32;
break;
case 44:return 33;
break;
case 45:return 22;
break;
case 46:return 13;
break;
case 47:return 63;
break;
case 48:return 62;
break;
case 49:return 64;
break;
case 50:return 'Rtype';
break;
case 51:return 65;
break;
case 52:return 85;
break;
case 53:return 83;
break;
case 54:return 53;
break;
case 55:return 27;
break;
case 56:return 52;
break;
case 57:return 'Rarray';
break;
case 58:return 37;
break;
case 59:return 59;
break;
case 60:return 40;
break;
case 61:return 42;
break;
case 62:return 'Rpush';
break;
case 63:return 'Rpop';
break;
case 64:return 'Rlength';
break;
case 65:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2);return 'cadenar'
break;
case 66:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2);return 86
break;
case 67:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2);return 87
break;
case 68:return 82;
break;
case 69:return 81;
break;
case 70:return 9;
break;
case 71:return 5;
break;
case 72: 
	console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
	listaErrores.push({tipo:'Error Léxico',valor:yy_.yytext,linea:yy_.yylloc.first_line,columna:yy_.yylloc.first_column});
	return {nombre:"error",lista:listaErrores};
	
break;
}
},
rules: [/^(?:\s+)/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:;)/,/^(?::)/,/^(?:==)/,/^(?:\*\*)/,/^(?:=)/,/^(?:\.)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:`)/,/^(?:\?)/,/^(?:\$)/,/^(?:!=)/,/^(?:!)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:console\.log\b)/,/^(?:null\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:continue\b)/,/^(?:function\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:number\b)/,/^(?:type\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:default\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:Array\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:{cadenar})/,/^(?:("([^\"]|[ntr])*"))/,/^(?:('([^\']|[ntr])*'))/,/^(?:([0-9]+(\.[0-9]+)?\b))/,/^(?:([0-9]+\b))/,/^(?:([a-zA-Z]+(_|[a-zA-AZ]|[0-9])*\b))/,/^(?:$)/,/^(?:.)/],
conditions: {"string":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Ejecutar;
exports.Parser = Ejecutar.Parser;
exports.parse = function () { return Ejecutar.parse.apply(Ejecutar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}